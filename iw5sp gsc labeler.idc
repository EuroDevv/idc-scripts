
#include <idc/idc.idc>

/*
this script is for modern warfare 3 special ops on the playstation 3, since it won't ever get an update I have just done it pretty statically, but useful for others who are new and still on playstation 3 and want stuff labeled.
*/

static resolve(name) {
    //methods
    if(name == 0x80CD) return "PlayerCmd_GetViewmodel";
	if(name == 0x80CE) return "PlayerCmd_fragButtonPressed";
	if(name == 0x80CF) return "PlayerCmd_secondaryOffhandButtonPressed";
	if(name == 0x80D0) return "PlayerCmd_getCurrentWeaponClipAmmo";
	if(name == 0x80D1) return "PlayerCmd_SetVelocity";
	if(name == 0x80D2) return "PlayerCmd_getViewHeight";
	if(name == 0x8309) return "PlayerCmd_EnableMouseSteer";
	if(name == 0x80D3) return "PlayerCmd_getNormalizedMovement";
	if(name == 0x80D4) return "PlayerCmd_getNormalizedCameraMovement";
	if(name == 0x80D5) return "PlayerCmd_giveWeapon";
	if(name == 0x80D6) return "PlayerCmd_takeWeapon";
	if(name == 0x80D7) return "PlayerCmd_takeAllWeapons";
	if(name == 0x80D8) return "PlayerCmd_getCurrentWeapon";
	if(name == 0x80D9) return "PlayerCmd_getCurrentPrimaryWeapon";
	if(name == 0x80DA) return "PlayerCmd_getCurrentOffhand";
	if(name == 0x80DB) return "PlayerCmd_hasWeapon";
	if(name == 0x80DC) return "PlayerCmd_switchToWeapon";
	if(name == 0x80DD) return "PlayerCmd_switchToWeaponImmediate";
	if(name == 0x80DE) return "PlayerCmd_switchToOffhand";
	if(name == 0x80DF) return "PlayerCmd_giveStartAmmo";
	if(name == 0x80E0) return "PlayerCmd_giveMaxAmmo";
	if(name == 0x80E1) return "PlayerCmd_getFractionStartAmmo";
	if(name == 0x80E2) return "PlayerCmd_getFractionMaxAmmo";
	if(name == 0x80E3) return "PlayerCmd_isDualWielding";
	if(name == 0x80E4) return "PlayerCmd_isReloading";
	if(name == 0x80E5) return "PlayerCmd_isSwitchingWeapon";
	if(name == 0x80E6) return "PlayerCmd_setOrigin";
	if(name == 0x80E7) return "PlayerCmd_GetVelocity";
	if(name == 0x80E8) return "PlayerCmd_setAngles";
	if(name == 0x80E9) return "PlayerCmd_getAngles";
	if(name == 0x80EA) return "PlayerCmd_useButtonPressed";
	if(name == 0x80EB) return "PlayerCmd_attackButtonPressed";
	if(name == 0x8274) return "PlayerCmd_vehicleAttackButtonPressed";
	if(name == 0x80EC) return "PlayerCmd_adsButtonPressed";
	if(name == 0x80ED) return "PlayerCmd_meleeButtonPressed";
	if(name == 0x80EE) return "PlayerCmd_playerADS";
	if(name == 0x80EF) return "PlayerCmd_isOnGround";
	if(name == 0x80F0) return "PlayerCmd_isUsingTurret";
	if(name == 0x80F1) return "PlayerCmd_SetViewmodel";
	if(name == 0x80F2) return "PlayerCmd_setOffhandPrimaryClass";
	if(name == 0x80F3) return "PlayerCmd_getOffhandPrimaryClass";
	if(name == 0x80F4) return "PlayerCmd_setOffhandSecondaryClass";
	if(name == 0x80F5) return "PlayerCmd_getOffhandSecondaryClass";
	if(name == 0x80F6) return "PlayerCmd_BeginLocationSelection";
	if(name == 0x80F7) return "PlayerCmd_EndLocationSelection";
	if(name == 0x80F8) return "PlayerCmd_DisableWeapons";
	if(name == 0x80F9) return "PlayerCmd_EnableWeapons";
	if(name == 0x80FA) return "PlayerCmd_DisableOffhandWeapons";
	if(name == 0x80FB) return "PlayerCmd_EnableOffhandWeapons";
	if(name == 0x80FC) return "PlayerCmd_DisableWeaponSwitch";
	if(name == 0x80FD) return "PlayerCmd_EnableWeaponSwitch";
	if(name == 0x80FE) return "PlayerCmd_OpenPopupMenu";
	if(name == 0x80FF) return "PlayerCmd_OpenPopupMenuNoMouse";
	if(name == 0x8100) return "PlayerCmd_ClosePopupMenu";
	if(name == 0x8101) return "PlayerCmd_OpenMenu";
	if(name == 0x8102) return "PlayerCmd_CloseMenu";
	if(name == 0x8104) return "PlayerCmd_FreezeControls";
	if(name == 0x8105) return "PlayerCmd_DisableUsability";
	if(name == 0x8106) return "PlayerCmd_EnableUsability";
	if(name == 0x8275) return "PlayerCmd_SetWhizbyOffset";
	if(name == 0x8276) return "PlayerCmd_SetWhizbyProbabilities";
	if(name == 0x8107) return "PlayerCmd_SetWhizbySpreads";
	if(name == 0x8108) return "PlayerCmd_SetWhizbyRadii";
	if(name == 0x8109) return "PlayerCmd_SetReverb";
	if(name == 0x810A) return "PlayerCmd_DeactivateReverb";
	if(name == 0x810B) return "PlayerCmd_SetVolMod";
	if(name == 0x810C) return "PlayerCmd_SetChannelVolume";
	if(name == 0x810D) return "PlayerCmd_SetChannelVolumes";
	if(name == 0x810E) return "PlayerCmd_DeactivateChannelVolumes";
	if(name == 0x810F) return "ScrCmd_PlayLocalSound";
	if(name == 0x8110) return "ScrCmd_StopLocalSound";
	if(name == 0x8111) return "PlayerCmd_SetWeaponAmmoClip";
	if(name == 0x8112) return "PlayerCmd_SetWeaponAmmoStock";
	if(name == 0x8113) return "PlayerCmd_GetWeaponAmmoClip";
	if(name == 0x8114) return "PlayerCmd_GetWeaponAmmoStock";
	if(name == 0x8115) return "PlayerCmd_AnyAmmoForWeaponModes";
	if(name == 0x8116) return "PlayerCmd_SetClientDvar";
	if(name == 0x8117) return "PlayerCmd_SetClientDvars";
	if(name == 0x8118) return "PlayerCmd_AllowADS";
	if(name == 0x8119) return "PlayerCmd_AllowJump";
	if(name == 0x811A) return "PlayerCmd_AllowSprint";
	if(name == 0x811B) return "PlayerCmd_SetSpreadOverride";
	if(name == 0x811C) return "PlayerCmd_ResetSpreadOverride";
	if(name == 0x811D) return "PlayerCmd_SetAimSpreadMovementScale";
	if(name == 0x811E) return "PlayerCmd_SetActionSlot";
	if(name == 0x811F) return "PlayerCmd_SetViewKickScale";
	if(name == 0x8120) return "PlayerCmd_GetViewKickScale";
	if(name == 0x8121) return "PlayerCmd_GetWeaponsListAll";
	if(name == 0x8122) return "PlayerCmd_GetWeaponsListPrimaries";
	if(name == 0x8123) return "PlayerCmd_GetWeaponsListOffhands";
	if(name == 0x8124) return "PlayerCmd_GetWeaponsListItems";
	if(name == 0x8125) return "PlayerCmd_GetWeaponsListExclusives";
	if(name == 0x8126) return "PlayerCmd_GetWeaponsList";
	if(name == 0x8127) return "PlayerCmd_CanPlayerPlaceSentry";
	if(name == 0x8128) return "PlayerCmd_CanPlayerPlaceTank";
	if(name == 0x8129) return "Scr_VisionSetNakedForPlayer";
	if(name == 0x8277) return "Scr_VisionSetNakedForPlayer_Lerp";
	if(name == 0x812A) return "Scr_VisionSetNightForPlayer";
	if(name == 0x812B) return "Scr_VisionSetMissileCamForPlayer";
	if(name == 0x812C) return "Scr_VisionSetThermalForPlayer";
	if(name == 0x812D) return "Scr_VisionSetPainForPlayer";
	if(name == 0x812E) return "Scr_SetBlurForPlayer";
	if(name == 0x812F) return "Scr_GetPlayerWeaponModel";
	if(name == 0x8130) return "Scr_GetPlayerKnifeModel";
	if(name == 0x8131) return "Scr_UpdatePlayerModelWithWeapons";
	if(name == 0x8132) return "GScr_notifyOnPlayerCommand";
	if(name == 0x8133) return "PlayerCmd_CanMantle";
	if(name == 0x8134) return "PlayerCmd_ForceMantle";
	if(name == 0x8135) return "PlayerCmd_IsMantling";
	if(name == 0x8136) return "PlayerCmd_PlayFX";
	if(name == 0x8137) return "PlayerCmd_PlayerRecoilScaleOn";
	if(name == 0x8138) return "PlayerCmd_PlayerRecoilScaleOff";
	if(name == 0x8139) return "PlayerCmd_WeaponLockStart";
	if(name == 0x813A) return "PlayerCmd_WeaponLockFinalize";
	if(name == 0x813B) return "PlayerCmd_WeaponLockFree";
	if(name == 0x813C) return "PlayerCmd_WeaponLockTargetTooClose";
	if(name == 0x813D) return "PlayerCmd_WeaponLockNoClearance";
	if(name == 0x813F) return "PlayerCmd_ShowHudSplash";
	if(name == 0x8140) return "PlayerCmd_SetPerk";
	if(name == 0x8141) return "PlayerCmd_HasPerk";
	if(name == 0x8142) return "PlayerCmd_ClearPerks";
	if(name == 0x8143) return "PlayerCmd_UnsetPerk";
	if(name == 0x8144) return "PlayerCmd_Noclip";
	if(name == 0x8145) return "PlayerCmd_UFO";
	if(name == 0x80BA) return "PlayerCmd_GetXuid";
	if(name == 0x8000) return "ScrCmd_attach";
	if(name == 0x8001) return "ScrCmd_attachShieldModel";
	if(name == 0x8002) return "ScrCmd_detach";
	if(name == 0x8003) return "ScrCmd_detachShieldModel";
	if(name == 0x8004) return "ScrCmd_moveShieldModel";
	if(name == 0x8005) return "ScrCmd_detachAll";
	if(name == 0x8006) return "ScrCmd_GetAttachSize";
	if(name == 0x8007) return "ScrCmd_GetAttachModelName";
	if(name == 0x8008) return "ScrCmd_GetAttachTagName";
	if(name == 0x8009) return "ScrCmd_GetAttachIgnoreCollision";
	if(name == 0x800A) return "ScrCmd_hidepart";
	if(name == 0x800B) return "ScrCmd_hidepartAllInstances";
	if(name == 0x800C) return "ScrCmd_hideallparts";
	if(name == 0x800D) return "ScrCmd_showpart";
	if(name == 0x800E) return "ScrCmd_showallparts";
	if(name == 0x800F) return "ScrCmd_LinkTo";
	if(name == 0x8010) return "ScrCmd_LinkToBlendToTag";
	if(name == 0x8011) return "ScrCmd_Unlink";
	if(name == 0x8012) return "ScrCmd_IsLinked";
	if(name == 0x8013) return "ScrCmd_EnableLinkTo";
	if(name == 0x8014) return "ScrCmd_PlayerLinkTo";
	if(name == 0x8015) return "ScrCmd_PlayerLinkToDelta";
	if(name == 0x8016) return "ScrCmd_PlayerLinkWeaponViewToDelta";
	if(name == 0x8017) return "ScrCmd_PlayerLinkToAbsolute";
	if(name == 0x8018) return "ScrCmd_PlayerLinkToBlend";
	if(name == 0x8019) return "ScrCmd_PlayerLinkedOffsetEnable";
	if(name == 0x801A) return "ScrCmd_PlayerLinkedOffsetDisable";
	if(name == 0x801B) return "ScrCmd_PlayerLinkedSetViewZnear";
	if(name == 0x801C) return "ScrCmd_PlayerLinkedSetUseBaseAngleForViewClamp";
	if(name == 0x819E) return "ScrCmd_PlayerLinkedTurretAnglesEnable";
	if(name == 0x819F) return "ScrCmd_PlayerLinkedTurretAnglesDisable";
	if(name == 0x81A0) return "ScrCmd_PlayerSetStreamOrigin";
	if(name == 0x81A1) return "ScrCmd_PlayerClearStreamOrigin";
	if(name == 0x801D) return "ScrCmd_LerpViewAngleClamp";
	if(name == 0x801E) return "ScrCmd_SetViewAngleResistance";
	if(name == 0x801F) return "ScrCmd_GetEye";
	if(name == 0x8020) return "ScrCmd_IsTouching";
	if(name == 0x8021) return "ScrCmd_StopLoopSound";
	if(name == 0x8022) return "ScrCmd_StopSounds";
	if(name == 0x8023) return "ScrCmd_PlayRumbleOnEntity";
	if(name == 0x8024) return "ScrCmd_PlayRumbleLoopOnEntity";
	if(name == 0x8025) return "ScrCmd_StopRumble";
	if(name == 0x8026) return "ScrCmd_Delete";
	if(name == 0x8027) return "ScrCmd_SetModel";
	if(name == 0x8028) return "ScrCmd_LaserOn";
	if(name == 0x8029) return "ScrCmd_LaserOff";
	if(name == 0x802A) return "ScrCmd_LaserAltViewOn";
	if(name == 0x802B) return "ScrCmd_LaserAltViewOff";
	if(name == 0x802C) return "ScrCmd_ThermalVisionOn";
	if(name == 0x802D) return "ScrCmd_ThermalVisionOff";
	if(name == 0x82EF) return "ScrCmd_ThermalDrawEnable";
	if(name == 0x82F0) return "ScrCmd_ThermalDrawDisable";
	if(name == 0x802E) return "ScrCmd_ThermalVisionFOFOverlayOn";
	if(name == 0x802F) return "ScrCmd_ThermalVisionFOFOverlayOff";
	if(name == 0x81A2) return "ScrCmd_NightVisionViewOn";
	if(name == 0x81A3) return "ScrCmd_NightVisionViewOff";
	if(name == 0x81A4) return "ScrCmd_PainVisionOn";
	if(name == 0x81A5) return "ScrCmd_PainVisionOff";
	if(name == 0x8032) return "ScrCmd_SetContents";
	if(name == 0x8033) return "ScrCmd_MakeUsable";
	if(name == 0x8034) return "ScrCmd_MakeUnusable";
	if(name == 0x8035) return "GScr_SetCursorHint";
	if(name == 0x8036) return "GScr_SetHintString";
	if(name == 0x8037) return "ScrCmd_ForceUseHintOn";
	if(name == 0x8038) return "ScrCmd_ForceUseHintOff";
	if(name == 0x8039) return "ScrCmd_MakeSoft";
	if(name == 0x803A) return "ScrCmd_MakeHard";
	if(name == 0x803B) return "ScrCmd_EntityWillNeverChange";
	if(name == 0x803C) return "GScr_StartFiring";
	if(name == 0x803D) return "GScr_StopFiring";
	if(name == 0x803E) return "GScr_IsFiringTurret";
	if(name == 0x803F) return "GScr_StartBarrelSpin";
	if(name == 0x8040) return "GScr_StopBarrelSpin";
	if(name == 0x8041) return "GScr_GetBarrelSpinRate";
	if(name == 0x8044) return "GScr_ShootTurret";
	if(name == 0x8045) return "GScr_GetTurretOwner";
	if(name == 0x8046) return "GScr_SetSentryOwner";
	if(name == 0x8047) return "GScr_SetSentryCarrier";
	if(name == 0x8048) return "GScr_SetTurretMinimapVisible";
	if(name == 0x8049) return "GScr_SetTargetEntity";
	if(name == 0x804A) return "GScr_SnapToTargetEntity";
	if(name == 0x804B) return "GScr_ClearTargetEntity";
	if(name == 0x804C) return "GScr_GetTurretTarget";
	if(name == 0x804D) return "GScr_SetPlayerSpread";
	if(name == 0x804E) return "GScr_SetAiSpread";
	if(name == 0x804F) return "GScr_SetSuppressionTime";
	if(name == 0x8050) return "GScr_SetConvergenceTime";
	if(name == 0x8051) return "GScr_SetConvergenceHeightPercent";
	if(name == 0x8052) return "GScr_SetTurretTeam";
	if(name == 0x8053) return "GScr_MakeTurretSolid";
	if(name == 0x8054) return "GScr_MakeTurretOperable";
	if(name == 0x8055) return "GScr_MakeTurretInoperable";
	if(name == 0x8056) return "GScr_SetTurretAccuracy";
	if(name == 0x8057) return "GScr_SetRightArc";
	if(name == 0x8058) return "GScr_SetLeftArc";
	if(name == 0x8059) return "GScr_SetTopArc";
	if(name == 0x805A) return "GScr_SetBottomArc";
	if(name == 0x805B) return "GScr_SetAutoRotationDelay";
	if(name == 0x805C) return "GScr_SetDefaultDropPitch";
	if(name == 0x805D) return "GScr_RestoreDefaultDropPitch";
	if(name == 0x805E) return "GScr_TurretFireDisable";
	if(name == 0x805F) return "GScr_TurretFireEnable";
	if(name == 0x8060) return "GScr_SetTurretModeChangeWait";
	if(name == 0x8061) return "GScr_UseTriggerRequireLookAt";
	if(name == 0x8062) return "ScrCmd_GetStance";
	if(name == 0x8063) return "ScrCmd_SetStance";
	if(name == 0x8064) return "ScrCmd_ItemWeaponSetAmmo";
	if(name == 0x8065) return "GScr_GetAmmoCount";
	if(name == 0x8066) return "GScr_GetTagOrigin";
	if(name == 0x8067) return "GScr_GetTagAngles";
	if(name == 0x8068) return "GScr_ShellShock";
	if(name == 0x8069) return "GScr_StunPlayer";
	if(name == 0x806A) return "GScr_StopShellShock";
	if(name == 0x806B) return "GScr_FadeOutShellShock";
	if(name == 0x806C) return "GScr_SetDepthOfField";
	if(name == 0x806D) return "GScr_SetViewModelDepthOfField";
	if(name == 0x806E) return "GScr_SetMotionBlurMoveScale";
	if(name == 0x806F) return "GScr_SetMotionBlurTurnScale";
	if(name == 0x8070) return "GScr_SetMotionBlurZoomScale";
	if(name == 0x8071) return "GScr_ViewKick";
	if(name == 0x8072) return "GScr_LocalToWorldCoords";
	if(name == 0x8073) return "GScr_GetEntityNumber";
	if(name == 0x8074) return "GScr_GetEntityVelocity";
	if(name == 0x8075) return "GScr_EnableGrenadeTouchDamage";
	if(name == 0x8076) return "GScr_DisableGrenadeTouchDamage";
	if(name == 0x8077) return "GScr_EnableAimAssist";
	if(name == 0x8078) return "GScr_DisableAimAssist";
	if(name == 0x8079) return "GScr_EntityRadiusDamage";
	if(name == 0x807A) return "GScr_Detonate";
	if(name == 0x807B) return "GScr_DamageConeTrace";
	if(name == 0x807C) return "GScr_SightConeTrace";
	if(name == 0x807D) return "GScr_MissileSetTargetEnt";
	if(name == 0x807E) return "GScr_MissileSetTargetPos";
	if(name == 0x807F) return "GScr_MissileClearTarget";
	if(name == 0x8080) return "GScr_MissileSetFlightmodeDirect";
	if(name == 0x8081) return "GScr_MissileSetFlightmodeTop";
	if(name == 0x8082) return "GScr_GetLightIntensity";
	if(name == 0x8083) return "GScr_SetLightIntensity";
	if(name == 0x8084) return "GScr_IsRagdoll";
	if(name == 0x8085) return "ScrCmd_SetMoveSpeedScale";
	if(name == 0x8086) return "GScr_CameraLinkTo";
	if(name == 0x8087) return "GScr_CameraUnlink";
	if(name == 0x8088) return "GScr_ControlsLinkTo";
	if(name == 0x8089) return "GScr_ControlsUnlink";
	if(name == 0x8090) return "GScr_DriveVehicleAndControlTurret";
	if(name == 0x8091) return "GScr_DriveVehicleAndControlTurretOff";
	if(name == 0x8092) return "GScr_GetPlayerSetting";
	if(name == 0x81A6) return "GScr_GetPlayerIntelIsFound";
	if(name == 0x81A7) return "GScr_SetPlayerIntelFound";
	if(name == 0x8093) return "GScr_GetLocalPlayerProfileData";
	if(name == 0x8094) return "GScr_SetLocalPlayerProfileData";
	if(name == 0x8095) return "GScr_RemoteCameraSoundscapeOn";
	if(name == 0x8096) return "GScr_RemoteCameraSoundscapeOff";
	if(name == 0x8099) return "ScrCmd_SetMotionTrackerVisible";
	if(name == 0x809A) return "ScrCmd_GetMotionTrackerVisible";
	if(name == 0x809B) return "ScrCmd_WorldPointInReticle_Circle";
	if(name == 0x809C) return "ScrCmd_GetPointInBounds";
	if(name == 0x809D) return "ScrCmd_TransferMarksToNewScriptModel";
	if(name == 0x809E) return "GScrCmd_SetWaterSheeting";
	if(name == 0x809F) return "GScrCmd_SetWeaponHudIconOverride";
	if(name == 0x80A0) return "GScrCmd_GetWeaponHudIconOverride";
	if(name == 0x80A1) return "GScr_SetEMPJammed";
	if(name == 0x80A2) return "Scr_PlayerSetExponentialFog";
	if(name == 0x80A3) return "GScr_IsItemUnlocked";
	if(name == 0x80A4) return "GScr_GetPlayerData";
	if(name == 0x80A5) return "GScr_SetPlayerData";
	if(name == 0x81A8) return "GScr_NewPIP";
	if(name == 0x81A9) return "GScr_SetHUDDynLight";
	if(name == 0x80A6) return "ScrCmd_TrackerUpdate";
	if(name == 0x81AA) return "ActorCmd_StartScriptedAnim";
	if(name == 0x81AB) return "ActorCmd_StartCoverBehavior";
	if(name == 0x81AC) return "ActorCmd_StartCoverArrival";
	if(name == 0x81AD) return "ActorCmd_StartTraverseArrival";
	if(name == 0x81AE) return "ActorCmd_CheckCoverExitPosWithPath";
	if(name == 0x81AF) return "ActorCmd_Shoot";
	if(name == 0x81B0) return "ActorCmd_ShootBlank";
	if(name == 0x81B1) return "ActorCmd_Melee";
	if(name == 0x81B2) return "ActorCmd_UpdatePlayerSightAccuracy";
	if(name == 0x81B3) return "ActorCmd_FindShuffleCoverNode";
	if(name == 0x81B4) return "ActorCmd_FindNearbyCoverNode";
	if(name == 0x81B5) return "ActorCmd_FindCoverNode";
	if(name == 0x81B6) return "ActorCmd_FindBestCoverNode";
	if(name == 0x81B7) return "ActorCmd_GetCoverNode";
	if(name == 0x81B8) return "ActorCmd_UseCoverNode";
	if(name == 0x81B9) return "ActorCmd_IsCoverValidAgainstEnemy";
	if(name == 0x81BA) return "ActorCmd_ReacquireStep";
	if(name == 0x81BB) return "ActorCmd_FindReacquireDirectPath";
	if(name == 0x81BC) return "ActorCmd_TrimPathToAttack";
	if(name == 0x81BD) return "ActorCmd_ReacquireMove";
	if(name == 0x81BE) return "ActorCmd_FindReacquireProximatePath";
	if(name == 0x81BF) return "ActorCmd_FlagEnemyUnattackable";
	if(name == 0x81C0) return "ActorCmd_EnterProne";
	if(name == 0x81C1) return "ActorCmd_ExitProne";
	if(name == 0x81C2) return "ActorCmd_SetProneAnimNodes";
	if(name == 0x81C3) return "ActorCmd_UpdateProne";
	if(name == 0x81C4) return "ActorCmd_ClearPitchOrient";
	if(name == 0x81C5) return "ActorCmd_SetLookAtAnimNodes";
	if(name == 0x81C6) return "ActorCmd_SetLookAt";
	if(name == 0x81C7) return "ActorCmd_SetLookAtEntity";
	if(name == 0x81C8) return "ActorCmd_SetLookAtYawLimits";
	if(name == 0x81C9) return "ActorCmd_StopLookAt";
	if(name == 0x81CA) return "ActorCmd_GetMuzzlePos";
	if(name == 0x81CB) return "ActorCmd_GetMuzzleAngle";
	if(name == 0x81CC) return "ActorCmd_GetMuzzleSideOffsetPos";
	if(name == 0x81CD) return "ActorCmd_GetAimAngle";
	if(name == 0x81CE) return "ActorCmd_CanShoot";
	if(name == 0x81CF) return "ActorCmd_CanShootEnemy";
	if(name == 0x81D0) return "ActorCmd_CanSee";
	if(name == 0x81D1) return "ActorCmd_SeeRecently";
	if(name == 0x81D2) return "ActorCmd_LastKnownTime";
	if(name == 0x81D3) return "ActorCmd_LastKnownPos";
	if(name == 0x81D4) return "ActorCmd_DropWeapon";
	if(name == 0x81D5) return "ActorCmd_MayMoveToPoint";
	if(name == 0x81D6) return "ActorCmd_MayMoveFromPointToPoint";
	if(name == 0x81D7) return "ActorCmd_Teleport";
	if(name == 0x81D8) return "ActorCmd_ForceTeleport";
	if(name == 0x81D9) return "ActorCmd_SafeTeleport";
	if(name == 0x81DA) return "ActorCmd_WithinApproxPathDist";
	if(name == 0x81DB) return "ActorCmd_IsPathDirect";
	if(name == 0x81DC) return "ActorCmd_AllowedStances";
	if(name == 0x81DD) return "ActorCmd_IsStanceAllowed";
	if(name == 0x81DE) return "ActorCmd_IsSuppressionWaiting";
	if(name == 0x81DF) return "ActorCmd_IsSuppressed";
	if(name == 0x81E0) return "ActorCmd_IsMoveSuppressed";
	if(name == 0x81E1) return "ActorCmd_IsGrenadePosSafe";
	if(name == 0x81E2) return "ActorCmd_CheckGrenadeThrow";
	if(name == 0x81E3) return "ActorCmd_CheckGrenadeLaunch";
	if(name == 0x81E4) return "ActorCmd_CheckGrenadeLaunchPos";
	if(name == 0x81E5) return "ActorCmd_ThrowGrenade";
	if(name == 0x81E6) return "ActorCmd_PickUpGrenade";
	if(name == 0x81E7) return "ActorCmd_UseTurret";
	if(name == 0x81E8) return "ActorCmd_StopUseTurret";
	if(name == 0x81E9) return "ActorCmd_CanUseTurret";
	if(name == 0x81EA) return "ActorCmd_TraverseMode";
	if(name == 0x81EB) return "ActorCmd_AnimMode";
	if(name == 0x81EC) return "ActorCmd_OrientMode";
	if(name == 0x81ED) return "ActorCmd_GetMotionAngle";
	if(name == 0x81EE) return "ActorCmd_ShouldFaceMotion";
	if(name == 0x81EF) return "ActorCmd_GetAnglesToLikelyEnemyPath";
	if(name == 0x81F0) return "ActorCmd_SetTurretAnim";
	if(name == 0x81F1) return "ActorCmd_GetTurret";
	if(name == 0x81F2) return "ActorCmd_GetGroundEntType";
	if(name == 0x81F3) return "ScrCmd_AnimCustom";
	if(name == 0x81F4) return "ScrCmd_IsInScriptedState";
	if(name == 0x81F5) return "ScrCmd_CanAttackEnemyNode";
	if(name == 0x81F6) return "ScrCmd_GetNegotiationStartNode";
	if(name == 0x81F7) return "ScrCmd_GetNegotiationEndNode";
	if(name == 0x81F8) return "ScrCmd_GetDoorPathNode";
	if(name == 0x81F9) return "ScrCmd_CompareNodeDirToPathDir";
	if(name == 0x81FA) return "ActorCmd_CheckProne";
	if(name == 0x81FB) return "ActorCmd_PushPlayer";
	if(name == 0x81FC) return "ActorCmd_CheckGrenadeThrowPos";
	if(name == 0x81FD) return "ActorCmd_SetGoalNode";
	if(name == 0x81FE) return "ActorCmd_SetGoalPos";
	if(name == 0x81FF) return "ActorCmd_SetGoalEntity";
	if(name == 0x8200) return "ActorCmd_SetGoalVolume";
	if(name == 0x8201) return "ActorCmd_SetGoalVolumeAuto";
	if(name == 0x8202) return "ActorCmd_GetGoalVolume";
	if(name == 0x8203) return "ActorCmd_ClearGoalVolume";
	if(name == 0x8204) return "ActorCmd_SetFixedNodeSafeVolume";
	if(name == 0x8205) return "ActorCmd_GetFixedNodeSafeVolume";
	if(name == 0x8206) return "ActorCmd_ClearFixedNodeSafeVolume";
	if(name == 0x8207) return "ActorCmd_IsInGoal";
	if(name == 0x8208) return "ActorCmd_SetOverrideRunToPos";
	if(name == 0x8209) return "ActorCmd_NearNode";
	if(name == 0x820A) return "ActorCmd_NearClaimNode";
	if(name == 0x820B) return "ActorCmd_NearClaimNodeAndAngle";
	if(name == 0x820C) return "ActorCmd_AtDangerousNode";
	if(name == 0x820D) return "ActorCmd_GetEnemyInfo";
	if(name == 0x820E) return "ActorCmd_ClearEnemy";
	if(name == 0x820F) return "ActorCmd_SetEntityTarget";
	if(name == 0x8210) return "ActorCmd_ClearEntityTarget";
	if(name == 0x8211) return "ActorCmd_SetPotentialThreat";
	if(name == 0x8212) return "ActorCmd_ClearPotentialThreat";
	if(name == 0x8213) return "ActorCmd_SetFlashBanged";
	if(name == 0x8214) return "ActorCmd_SetEngagementMinDist";
	if(name == 0x8215) return "ActorCmd_SetEngagementMaxDist";
	if(name == 0x8216) return "ActorCmd_IsKnownEnemyInRadius";
	if(name == 0x8217) return "ActorCmd_IsKnownEnemyInVolume";
	if(name == 0x8218) return "ActorCmd_SetTalkToSpecies";
	if(name == 0x8219) return "ActorCmd_LaserAltOn";
	if(name == 0x821A) return "ActorCmd_LaserAltOff";
	if(name == 0x821B) return "ActorCmd_InvisibleNotSolid";
	if(name == 0x821C) return "ActorCmd_VisibleSolid";
	if(name == 0x821D) return "ActorCmd_SetDefaultAimLimits";
	if(name == 0x821E) return "ActorCmd_InitRiotshieldHealth";
	if(name == 0x821F) return "SentientCmd_GetEnemySqDist";
	if(name == 0x8220) return "SentientCmd_GetClosestEnemySqDist";
	if(name == 0x8221) return "SentientCmd_SetThreatBiasGroup";
	if(name == 0x8222) return "SentientCmd_GetThreatBiasGroup";
	if(name == 0x8223) return "SentientCmd_MakeEntitySentient";
	if(name == 0x8224) return "SentientCmd_FreeEntitySentient";
	if(name == 0x8225) return "SentientCmd_IsInDoor";
	if(name == 0x8226) return "SentientCmd_GetDropToFloorPosition";
	if(name == 0x8227) return "SentientCmd_IsBadGuy";
	if(name == 0x8228) return "ScrCmd_animscripted";
	if(name == 0x8229) return "ScrCmd_animscriptedthirdperson";
	if(name == 0x822A) return "ScrCmd_animrelative";
	if(name == 0x822B) return "ScrCmd_stopanimscripted";
	if(name == 0x822C) return "GScr_ClearAnim";
	if(name == 0x822D) return "GScr_SetAnimKnob";
	if(name == 0x822E) return "GScr_SetAnimKnobLimited";
	if(name == 0x822F) return "GScr_SetAnimKnobRestart";
	if(name == 0x8230) return "GScr_SetAnimKnobLimitedRestart";
	if(name == 0x8231) return "GScr_SetAnimKnobAll";
	if(name == 0x8232) return "GScr_SetAnimKnobAllLimited";
	if(name == 0x8233) return "GScr_SetAnimKnobAllRestart";
	if(name == 0x8234) return "GScr_SetAnimKnobAllLimitedRestart";
	if(name == 0x8235) return "GScr_SetAnim";
	if(name == 0x8236) return "GScr_SetAnimLimited";
	if(name == 0x8237) return "GScr_SetAnimRestart";
	if(name == 0x8238) return "GScr_SetAnimLimitedRestart";
	if(name == 0x8239) return "GScr_GetAnimTime";
	if(name == 0x823A) return "GScr_GetAnimWeight";
	if(name == 0x823B) return "GScr_GetAnimAssetType";
	if(name == 0x823C) return "GScr_SetFlaggedAnimKnob";
	if(name == 0x823D) return "GScr_SetFlaggedAnimKnobLimited";
	if(name == 0x823E) return "GScr_SetFlaggedAnimKnobRestart";
	if(name == 0x823F) return "GScr_SetFlaggedAnimKnobLimitedRestart";
	if(name == 0x8240) return "GScr_SetFlaggedAnimKnobAll";
	if(name == 0x8241) return "GScr_SetFlaggedAnimKnobAllRestart";
	if(name == 0x8242) return "GScr_SetFlaggedAnim";
	if(name == 0x8243) return "GScr_SetFlaggedAnimLimited";
	if(name == 0x8244) return "GScr_SetFlaggedAnimRestart";
	if(name == 0x8245) return "GScr_SetFlaggedAnimLimitedRestart";
	if(name == 0x8246) return "GScr_UseAnimTree";
	if(name == 0x8247) return "GScr_StopUseAnimTree";
	if(name == 0x8248) return "GScr_SetAnimTime";
	if(name == 0x80A8) return "PlayerCmd_buttonPressed";
	if(name == 0x8249) return "PlayerCmd_ShowViewmodel";
	if(name == 0x824A) return "PlayerCmd_HideViewmodel";
	if(name == 0x824B) return "PlayerCmd_AllowStand";
	if(name == 0x824C) return "PlayerCmd_AllowCrouch";
	if(name == 0x824D) return "PlayerCmd_AllowProne";
	if(name == 0x824E) return "PlayerCmd_AllowLean";
	if(name == 0x824F) return "PlayerCmd_SetOcclusion";
	if(name == 0x8250) return "PlayerCmd_DeactivateOcclusion";
	if(name == 0x8251) return "PlayerCmd_IsOcclusionEnabled";
	if(name == 0x8252) return "PlayerCmd_IsEqEnabled";
	if(name == 0x8253) return "PlayerCmd_SetEQ";
	if(name == 0x8254) return "PlayerCmd_SetEQBands";
	if(name == 0x8255) return "PlayerCmd_DeactivateEq";
	if(name == 0x8256) return "PlayerCmd_SetEQLerp";
	if(name == 0x8257) return "ScrCmd_IsLookingAt";
	if(name == 0x8258) return "PlayerCmd_IsThrowingGrenade";
	if(name == 0x8259) return "PlayerCmd_IsFiring";
	if(name == 0x825A) return "PlayerCmd_IsMeleeing";
	if(name == 0x825B) return "ScrCmd_SetAutoPickup";
	if(name == 0x825C) return "PlayerCmd_AllowMelee";
	if(name == 0x825D) return "PlayerCmd_AllowFire";
	if(name == 0x825E) return "PlayerCmd_EnableHealthShield";
	if(name == 0x825F) return "PlayerCmd_EnableDeathShield";
	if(name == 0x8260) return "PlayerCmd_NightVisionGogglesForceOn";
	if(name == 0x8261) return "PlayerCmd_NightVisionGogglesForceOff";
	if(name == 0x8262) return "PlayerCmd_EnableInvulnerability";
	if(name == 0x8263) return "PlayerCmd_DisableInvulnerability";
	if(name == 0x8264) return "PlayerCmd_EnableBreaching";
	if(name == 0x8265) return "PlayerCmd_DisableBreaching";
	if(name == 0x8266) return "PlayerCmd_ForceViewmodelAnimation";
	if(name == 0x8267) return "PlayerCmd_DisableTurretDismount";
	if(name == 0x8268) return "PlayerCmd_EnableTurretDismount";
	if(name == 0x8269) return "PlayerCmd_UploadScore";
	if(name == 0x826A) return "PlayerCmd_UploadTime";
	if(name == 0x826B) return "PlayerCmd_UploadLeaderboards";
	if(name == 0x826C) return "PlayerCmd_GiveAchievement";
	if(name == 0x826D) return "PlayerCmd_HideHud";
	if(name == 0x826E) return "PlayerCmd_ShowHud";
	if(name == 0x826F) return "PlayerCmd_MountVehicle";
	if(name == 0x8270) return "PlayerCmd_DismountVehicle";
	if(name == 0x8271) return "GScr_EnableSlowAim";
	if(name == 0x8272) return "GScr_DisableSlowAim";
	if(name == 0x8273) return "PlayerCmd_UseHintsInVehicle";
	if(name == 0x8146) return "ScriptEntCmd_MoveTo";
	if(name == 0x8147) return "ScriptEntCmd_MoveX";
	if(name == 0x8148) return "ScriptEntCmd_MoveY";
	if(name == 0x8149) return "ScriptEntCmd_MoveZ";
	if(name == 0x814A) return "ScriptEntCmd_GravityMove";
	if(name == 0x814B) return "ScriptEntCmd_MoveSlide";
	if(name == 0x814C) return "ScriptEntCmd_StopMoveSlide";
	if(name == 0x814D) return "ScriptEntCmd_RotateTo";
	if(name == 0x814E) return "ScriptEntCmd_RotatePitch";
	if(name == 0x814F) return "ScriptEntCmd_RotateYaw";
	if(name == 0x8150) return "ScriptEntCmd_RotateRoll";
	if(name == 0x8151) return "ScriptEntCmd_AddPitch";
	if(name == 0x8152) return "ScriptEntCmd_AddYaw";
	if(name == 0x8153) return "ScriptEntCmd_AddRoll";
	if(name == 0x8154) return "ScriptEntCmd_Vibrate";
	if(name == 0x8155) return "ScriptEntCmd_RotateVelocity";
	if(name == 0x8156) return "ScriptEntCmd_Solid";
	if(name == 0x8157) return "ScriptEntCmd_NotSolid";
	if(name == 0x8158) return "ScriptEntCmd_SetCanDamage";
	if(name == 0x8159) return "ScriptEntCmd_SetCanRadiusDamage";
	if(name == 0x815A) return "ScriptEntCmd_PhysicsLaunchClient";
	if(name == 0x815B) return "ScriptEntCmd_PhysicsLaunchServer";
	if(name == 0x815C) return "ScriptEntCmd_PhysicsLaunchServerItem";
	if(name == 0x815D) return "ScriptEntCmd_CloneBrushModelToScriptModel";
	if(name == 0x8160) return "VehCmd_Teleport";
	if(name == 0x8161) return "VehCmd_AttachPath";
	if(name == 0x8162) return "VehCmd_GetAttachPos";
	if(name == 0x8163) return "VehCmd_StartPath";
	if(name == 0x8164) return "VehCmd_SetSwitchNode";
	if(name == 0x8278) return "VehCmd_SetWaitNode";
	if(name == 0x8165) return "VehCmd_SetWaitSpeed";
	if(name == 0x8167) return "VehCmd_SetSpeed";
	if(name == 0x8168) return "VehCmd_SetSpeedImmediate";
	if(name == 0x8169) return "VehCmd_RotateYaw";
	if(name == 0x816A) return "VehCmd_GetSpeed";
	if(name == 0x816B) return "VehCmd_GetVelocity";
	if(name == 0x816C) return "VehCmd_GetBodyVelocity";
	if(name == 0x816D) return "VehCmd_GetSteering";
	if(name == 0x816E) return "VehCmd_GetThrottle";
	if(name == 0x816F) return "VehCmd_TurnEngineOff";
	if(name == 0x8170) return "VehCmd_TurnEngineOn";
	if(name == 0x8171) return "VehCmd_GetGoalSpeedMPH";
	if(name == 0x8172) return "VehCmd_SetAcceleration";
	if(name == 0x8173) return "VehCmd_SetDeceleration";
	if(name == 0x8174) return "VehCmd_ResumeSpeed";
	if(name == 0x8175) return "VehCmd_SetYawSpeed";
	if(name == 0x8176) return "VehCmd_SetYawSpeedByName";
	if(name == 0x8177) return "VehCmd_SetMaxPitchRoll";
	if(name == 0x8178) return "VehCmd_SetAirResitance";
	if(name == 0x8179) return "VehCmd_SetTurningAbility";
	if(name == 0x817A) return "VehCmd_SetJitterParams";
	if(name == 0x817B) return "VehCmd_SetHoverParams";
	if(name == 0x817C) return "VehCmd_JoltBody";
	if(name == 0x817D) return "VehCmd_FreeVehicle";
	if(name == 0x817E) return "VehCmd_GetWheelSurface";
	if(name == 0x817F) return "VehCmd_GetVehicleOwner";
	if(name == 0x8180) return "VehCmd_SetVehicleLookatText";
	if(name == 0x8181) return "VehCmd_SetVehicleTeam";
	if(name == 0x8182) return "VehCmd_NearGoalNotifyDist";
	if(name == 0x8183) return "VehCmd_SetGoalPos";
	if(name == 0x8184) return "VehCmd_SetGoalYaw";
	if(name == 0x8185) return "VehCmd_ClearGoalYaw";
	if(name == 0x8186) return "VehCmd_SetTargetYaw";
	if(name == 0x8187) return "VehCmd_ClearTargetYaw";
	if(name == 0x8188) return "VehCmd_HeliSetGoal";
	if(name == 0x8189) return "VehCmd_SetTurretTargetVec";
	if(name == 0x818A) return "VehCmd_SetTurretTargetEnt";
	if(name == 0x818B) return "VehCmd_ClearTurretTargetEnt";
	if(name == 0x818C) return "VehCmd_CanTurretTargetPoint";
	if(name == 0x818D) return "VehCmd_SetLookAtEnt";
	if(name == 0x818E) return "VehCmd_ClearLookAtEnt";
	if(name == 0x8279) return "VehCmd_ReturnPlayerControl";
	if(name == 0x818F) return "VehCmd_SetWeapon";
	if(name == 0x8190) return "VehCmd_FireWeapon";
	if(name == 0x8191) return "VehCmd_VehicleTurretControlOn";
	if(name == 0x8192) return "VehCmd_VehicleTurretControlOff";
	if(name == 0x8193) return "VehCmd_IsTurretReady";
	if(name == 0x8194) return "VehCmd_VehicleDriveTo";
	if(name == 0x8195) return "VehCmd_DoSpawn";
	if(name == 0x8196) return "VehCmd_IsPhysVeh";
	if(name == 0x827A) return "VehPhysCmd_StartTrack";
	if(name == 0x827B) return "VehPhysCmd_ClearAutoDisable";
	if(name == 0x8197) return "VehPhysCmd_Crash";
	if(name == 0x8198) return "VehPhysCmd_Launch";
	if(name == 0x8199) return "VehPhysCmd_DisableCrashing";
	if(name == 0x819A) return "VehPhysCmd_EnableCrashing";
	if(name == 0x819B) return "VehPhysCmd_SetSpeed";
	if(name == 0x819C) return "VehPhysCmd_SetConveyorBelt";
	if(name == 0x827C) return "GScr_UseVehicleAltBlendedAudio";
	if(name == 0x827D) return "HECmd_SetText";
	if(name == 0x827E) return "HECmd_ClearAllTextAfterHudElem";
	if(name == 0x827F) return "HECmd_SetMaterial";
	if(name == 0x8280) return "HECmd_SetTargetEnt";
	if(name == 0x8281) return "HECmd_ClearTargetEnt";
	if(name == 0x8282) return "HECmd_SetTimer";
	if(name == 0x8283) return "HECmd_SetTimerUp";
	if(name == 0x8284) return "HECmd_SetTimerStatic";
	if(name == 0x8285) return "HECmd_SetTenthsTimer";
	if(name == 0x8286) return "HECmd_SetTenthsTimerUp";
	if(name == 0x8287) return "HECmd_SetTenthsTimerStatic";
	if(name == 0x8288) return "HECmd_SetClock";
	if(name == 0x8289) return "HECmd_SetClockUp";
	if(name == 0x828A) return "HECmd_SetValue";
	if(name == 0x828B) return "HECmd_SetWaypoint";
	if(name == 0x828C) return "HECmd_SetWaypointEdgeStyle_RotatingIcon";
	if(name == 0x828D) return "HECmd_SetWaypointEdgeStyle_SecondaryArrow";
	if(name == 0x828E) return "HECmd_SetWaypointIconOffscreenOnly";
	if(name == 0x828F) return "HECmd_FadeOverTime";
	if(name == 0x8290) return "HECmd_ScaleOverTime";
	if(name == 0x8291) return "HECmd_MoveOverTime";
	if(name == 0x8292) return "HECmd_Reset";
	if(name == 0x8293) return "HECmd_Destroy";
	if(name == 0x8294) return "HECmd_SetPulseFX";
	if(name == 0x8295) return "HECmd_SetPlayerNameString";
	if(name == 0x8296) return "HECmd_ChangeFontScaleOverTime";
	if(name == 0x8297) return "ScrCmd_startIgnoringSpotLight";
	if(name == 0x8298) return "ScrCmd_stopIgnoringSpotLight";
	if(name == 0x8299) return "ScrCmd_DontCastShadows";
	if(name == 0x829A) return "ScrCmd_CastShadows";
	if(name == 0x829B) return "Scr_SetStableMissile";
	if(name == 0x829C) return "ScrCmd_PlayerSetGroundReferenceEnt";
	if(name == 0x829D) return "ScrCmd_DontInterpolate";
	if(name == 0x829E) return "ScrCmd_dospawn";
	if(name == 0x829F) return "ScrCmd_StalingradSpawn";
	if(name == 0x82A0) return "ScrCmd_GetOrigin";
	if(name == 0x82A1) return "ScrCmd_GetCentroid";
	if(name == 0x82A2) return "ScrCmd_GetShootAtPosition";
	if(name == 0x82A3) return "ScrCmd_GetDebugEye";
	if(name == 0x82A4) return "ScrCmd_UseBy";
	if(name == 0x82A5) return "ScrCmd_PlaySound";
	if(name == 0x82A6) return "ScrCmd_PlaySoundAtViewHeight";
	if(name == 0x82A7) return "ScrCmd_PrefetchSound";
	if(name == 0x82A8) return "ScrCmd_SetPitch";
	if(name == 0x82A9) return "ScrCmd_ScalePitch";
	if(name == 0x82AA) return "ScrCmd_SetVolume";
	if(name == 0x82AB) return "ScrCmd_ScaleVolume";
	if(name == 0x82AC) return "ScrCmd_SetSpeakerMapMonoToStereo";
	if(name == 0x82AD) return "ScrCmd_SetSpeakerMapMonoTo51";
	if(name == 0x82AE) return "ScrCmd_SetDistributed2DSound";
	if(name == 0x82AF) return "ScrCmd_PlaySoundAsMaster";
	if(name == 0x82B0) return "ScrCmd_PlayLoopSound";
	if(name == 0x82B1) return "ScrCmd_EqOn";
	if(name == 0x82B2) return "ScrCmd_EqOff";
	if(name == 0x82B3) return "ScrCmd_HasEq";
	if(name == 0x82B4) return "ScrCmd_IsWaitingOnSound";
	if(name == 0x82B5) return "ScrCmd_GetNormalHealth";
	if(name == 0x82B6) return "ScrCmd_SetNormalHealth";
	if(name == 0x82B7) return "ScrCmd_DoDamage";
	if(name == 0x82B8) return "ScrCmd_Kill";
	if(name == 0x82B9) return "ScrCmd_Show";
	if(name == 0x82BA) return "ScrCmd_Hide";
	if(name == 0x82BB) return "ScrCmd_ShowOnClient";
	if(name == 0x82BC) return "ScrCmd_HideOnClient";
	if(name == 0x82BD) return "ScrCmd_LaserForceOn";
	if(name == 0x82BE) return "ScrCmd_LaserForceOff";
	if(name == 0x82BF) return "GScr_DisconnectPaths";
	if(name == 0x82C0) return "GScr_ConnectPaths";
	if(name == 0x82C1) return "ScrCmd_startUsingHeroOnlyLighting";
	if(name == 0x82C2) return "ScrCmd_stopUsingHeroOnlyLighting";
	if(name == 0x82C3) return "ScrCmd_startUsingLessFrequentLighting";
	if(name == 0x82C4) return "ScrCmd_stopUsingLessFrequentLighting";
	if(name == 0x82C5) return "ScrCmd_SetThermalFog";
	if(name == 0x82C6) return "ScrCmd_SetNightVisionFog";
	if(name == 0x82C7) return "ScrCmd_ClearThermalFog";
	if(name == 0x82C8) return "ScrCmd_ClearNightVisionFog";
	if(name == 0x82C9) return "Scr_DigitalDistortSetParams";
	if(name == 0x82CA) return "GScr_SetMode";
	if(name == 0x82CB) return "GScr_GetMode";
	if(name == 0x82CC) return "GScr_SetTurretIgnoreGoals";
	if(name == 0x82CD) return "GScr_SetTurretCanAIDetach";
	if(name == 0x82CE) return "GScr_SetTurretFov";
	if(name == 0x82CF) return "ScrCmd_LerpFOV";
	if(name == 0x82D0) return "ScrCmd_GetValidCoverPeekOuts";
	if(name == 0x82D1) return "ScrCmd_GetHighestNodeStance";
	if(name == 0x82D2) return "ScrCmd_DoesNodeAllowStance";
	if(name == 0x82D3) return "ScrCmd_GetGunAngles";
	if(name == 0x82D4) return "ScrCmd_MagicGrenade_Actor";
	if(name == 0x82D5) return "ScrCmd_MagicGrenadeManual_Actor";
	if(name == 0x82D6) return "GScr_SetFriendlyChain";
	if(name == 0x82D7) return "GScr_GetEntnum";
	if(name == 0x82D8) return "GScr_Launch";
	if(name == 0x82D9) return "GScr_SetSoundBlend";
	if(name == 0x82DA) return "GScr_MakeEntityDrone";
	if(name == 0x82DB) return "GScr_SpawnDrone";
	if(name == 0x82DC) return "GScr_SetCorpseRemoveTimer";
	if(name == 0x82DD) return "GScr_SetLookatText";
	if(name == 0x82DE) return "GScr_SetSpawnerTeam";
	if(name == 0x82DF) return "ScrCmd_AddAIEventListener";
	if(name == 0x82E0) return "ScrCmd_RemoveAIEventListener";
	if(name == 0x82E1) return "GScr_GetLightColor";
	if(name == 0x82E2) return "GScr_SetLightColor";
	if(name == 0x82E3) return "GScr_GetLightRadius";
	if(name == 0x82E4) return "GScr_SetLightRadius";
	if(name == 0x82E5) return "GScr_GetLightFovInner";
	if(name == 0x82E6) return "GScr_GetLightFovOuter";
	if(name == 0x82E7) return "GScr_SetLightFovRange";
	if(name == 0x82E8) return "GScr_GetLightExponent";
	if(name == 0x82E9) return "GScr_SetLightExponent";
	if(name == 0x82EA) return "GScr_StartRagdoll";
	if(name == 0x82EB) return "GScr_StartRagdollFromImpact";
	if(name == 0x82EC) return "ScrCmd_LogString";
	if(name == 0x82ED) return "ScrCmd_LaserHideFromClient";
	if(name == 0x82EE) return "ScrCmd_StopSoundChannel";
	if(name == 0x82F1) return "GScr_SetTurretDismountOrg";
	
    //functions    
	if(name == 0x1) return "GScr_CreatePrintChannel";
	if(name == 0x2) return "GScr_printChannelSet";
	if(name == 0x3) return "Scr_Print";
	if(name == 0x4) return "Scr_PrintLn";
	if(name == 0x5) return "GScr_print3d";
	if(name == 0x6) return "GScr_line";
	if(name == 0x7) return "GScr_PrecacheTurret";
	if(name == 0x8) return "Scr_GetWeaponArray";
	if(name == 0x9) return "GScr_SpawnTurret";
	if(name == 0xA) return "GScr_CanSpawnTurret";
	if(name == 0xB) return "assertCmd";
	if(name == 0xC) return "assertexCmd";
	if(name == 0xD) return "assertmsgCmd";
	if(name == 0xE) return "GScr_IsDefined";
	if(name == 0xF) return "GScr_IsString";
	if(name == 0x10) return "GScr_SetDvar";
	if(name == 0x12) return "GScr_SetDvarIfUninitialized";
	if(name == 0x13) return "GScr_SetDevDvar";
	if(name == 0x14) return "GScr_SetDevDvarIfUninitialized";
	if(name == 0x15) return "GScr_GetDvar";
	if(name == 0x16) return "GScr_GetDvarInt";
	if(name == 0x17) return "GScr_GetDvarFloat";
	if(name == 0x18) return "GScr_GetDvarVector";
	if(name == 0x19) return "GScr_GetTime";
	if(name == 0x125) return "GScr_GetLevelTicks";
	if(name == 0x1A) return "Scr_GetEntByNum";
	if(name == 0x1B) return "Scr_GetWeaponModel";
	if(name == 0x1C) return "Scr_GetWeaponHideTags";
	if(name == 0x1D) return "GScr_GetAnimLength";
	if(name == 0x1E) return "GScr_AnimHasNotetrack";
	if(name == 0x1F) return "GScr_GetNotetrackTimes";
	if(name == 0x20) return "GScr_Spawn";
	if(name == 0x21) return "GScr_Spawn";
	if(name == 0x22) return "GScr_SpawnLoopingSound";
	if(name == 0x23) return "Scr_BulletTrace";
	if(name == 0x24) return "Scr_BulletTracePassed";
	if(name == 0x25) return "Scr_SightTracePassed";
	if(name == 0x26) return "Scr_PhysicsTrace";
	if(name == 0x27) return "Scr_PlayerPhysicsTrace";
	if(name == 0x28) return "Scr_GetGroundPosition";
	if(name == 0x29) return "GScr_GetMoveDelta";
	if(name == 0x2A) return "GScr_GetAngleDelta";
	if(name == 0x2B) return "GScr_GetNorthYaw";
	if(name == 0x2C) return "GScr_SetNorthYaw";
	if(name == 0x2D) return "ScrCmd_SetSlowMotion";
	if(name == 0x2E) return "Scr_RandomInt";
	if(name == 0x2F) return "Scr_RandomFloat";
	if(name == 0x30) return "Scr_RandomIntRange";
	if(name == 0x31) return "Scr_RandomFloatRange";
	if(name == 0x32) return "GScr_sin";
	if(name == 0x33) return "GScr_cos";
	if(name == 0x34) return "GScr_tan";
	if(name == 0x35) return "GScr_asin";
	if(name == 0x36) return "GScr_acos";
	if(name == 0x37) return "GScr_atan";
	if(name == 0x38) return "GScr_CastInt";
	if(name == 0x39) return "GScr_CastFloat";
	if(name == 0x3A) return "GScr_abs";
	if(name == 0x3B) return "GScr_min";
	if(name == 0x3C) return "GScr_max";
	if(name == 0x3D) return "GScr_floor";
	if(name == 0x3E) return "GScr_ceil";
	if(name == 0x3F) return "GScr_exp";
	if(name == 0x40) return "GScr_log";
	if(name == 0x41) return "GScr_sqrt";
	if(name == 0x42) return "GScr_squared";
	if(name == 0x43) return "GScr_clamp";
	if(name == 0x44) return "GScr_AngleClamp360";
	if(name == 0x45) return "GScr_AngleClamp180";
	if(name == 0x126) return "Scr_PerlinNoise2D";
	if(name == 0x127) return "Scr_CalcRockingAngles";
	if(name == 0x46) return "GScr_VectorFromLineToPoint";
	if(name == 0x47) return "GScr_PointOnSegmentNearestToPoint";
	if(name == 0x48) return "Scr_Distance";
	if(name == 0x49) return "Scr_Distance2D";
	if(name == 0x4A) return "Scr_DistanceSquared";
	if(name == 0x4B) return "Scr_Length";
	if(name == 0x4C) return "Scr_LengthSquared";
	if(name == 0x4D) return "Scr_Closer";
	if(name == 0x4E) return "Scr_VectorDot";
	if(name == 0x4F) return "Scr_VectorNormalize";
	if(name == 0x50) return "Scr_VectorToAngles";
	if(name == 0x51) return "Scr_VectorToYaw";
	if(name == 0x52) return "Scr_VectorLerp";
	if(name == 0x53) return "Scr_AnglesToUp";
	if(name == 0x54) return "Scr_AnglesToRight";
	if(name == 0x55) return "Scr_AnglesToForward";
	if(name == 0x56) return "Scr_CombineAngles";
	if(name == 0x57) return "Scr_TransformMove";
	if(name == 0x58) return "Scr_IsSubStr";
	if(name == 0x59) return "Scr_IsEndStr";
	if(name == 0x5A) return "Scr_GetSubStr";
	if(name == 0x5B) return "Scr_ToLower";
	if(name == 0x5C) return "Scr_StrTok";
	if(name == 0x5D) return "Scr_StrICmp";
	if(name == 0x5E) return "Scr_AmbientPlay";
	if(name == 0x5F) return "Scr_AmbientStop";
	if(name == 0x60) return "Scr_PrecacheModel";
	if(name == 0x61) return "Scr_PrecacheShellShock";
	if(name == 0x62) return "Scr_PrecacheItem";
	if(name == 0x63) return "Scr_PrecacheMaterial";
	if(name == 0x64) return "Scr_PrecacheString";
	if(name == 0x65) return "GScr_PrecacheMenu";
	if(name == 0x66) return "Scr_PrecacheRumble";
	if(name == 0x67) return "GScr_PrecacheLocationSelector";
	if(name == 0x68) return "Scr_PrecacheLeaderboards";
	if(name == 0xE9) return "GScr_PrecacheHeadIcon";
	if(name == 0x69) return "Scr_LoadFX";
	if(name == 0x6A) return "Scr_PlayFX";
	if(name == 0x6B) return "Scr_PlayFXOnTag";
	if(name == 0x6C) return "Scr_StopFXOnTag";
	if(name == 0x6D) return "Scr_PlayLoopedFX";
	if(name == 0x6E) return "Scr_SpawnFX";
	if(name == 0x6F) return "Scr_TriggerFX";
	if(name == 0x70) return "Scr_PlayFXOnTagForClients";
	if(name == 0x71) return "Scr_PhysicsExplosionSphere";
	if(name == 0x72) return "Scr_PhysicsExplosionCylinder";
	if(name == 0x73) return "Scr_PhysicsRadiusJolt";
	if(name == 0x74) return "Scr_PhysicsRadiusJitter";
	if(name == 0x75) return "Scr_SetExponentialFog";
	if(name == 0x76) return "GScr_IsExplosiveDamageMOD";
	if(name == 0x77) return "GScr_RadiusDamage";
	if(name == 0x78) return "GScr_SetPlayerIgnoreRadiusDamage";
	if(name == 0x79) return "GScr_GlassRadiusDamage";
	if(name == 0x7A) return "GScr_Earthquake";
	if(name == 0x7B) return "GScr_GetNumParts";
	if(name == 0x7C) return "GScr_GetPartName";
	if(name == 0x7D) return "GScr_WeaponFireTime";
	if(name == 0x7E) return "GScr_WeaponClipSize";
	if(name == 0x7F) return "GScr_WeaponIsAuto";
	if(name == 0x80) return "GScr_WeaponIsSemiAuto";
	if(name == 0x81) return "GScr_WeaponIsBoltAction";
	if(name == 0x82) return "GScr_WeaponInheritsPerks";
	if(name == 0x83) return "GScr_WeaponBurstCount";
	if(name == 0x84) return "GScr_WeaponType";
	if(name == 0x85) return "GScr_WeaponClass";
	if(name == 0x86) return "GScr_WeaponInventoryType";
	if(name == 0x87) return "GScr_WeaponStartAmmo";
	if(name == 0x88) return "GScr_WeaponMaxAmmo";
	if(name == 0x89) return "GScr_WeaponAltWeaponName";
	if(name == 0x8A) return "GScr_IsWeaponClipOnly";
	if(name == 0x8B) return "GScr_IsWeaponDetonationTimed";
	if(name == 0x8C) return "GScr_WeaponHasThermalScope";
	if(name == 0x8D) return "VehPathCmd_GetNode";
	if(name == 0x8E) return "VehPathCmd_GetNodeArray";
	if(name == 0x8F) return "VehPathCmd_GetAllNodes";
	if(name == 0x90) return "VehicleScript_GetActiveCount";
	if(name == 0x91) return "VehicleScript_Precache";
	if(name == 0x92) return "VehicleScript_Spawn";
	if(name == 0x93) return "VehicleScript_GetArray";
	if(name == 0x94) return "VehicleScript_GetSpawnerArray";
	if(name == 0x95) return "Scr_PlayRumbleOnPosition";
	if(name == 0x96) return "Scr_PlayRumbleLoopOnPosition";
	if(name == 0x97) return "Scr_StopAllRumbles";
	if(name == 0x98) return "ScrCmd_SoundExists";
	if(name == 0x99) return "GScr_OpenFile";
	if(name == 0x9A) return "GScr_CloseFile";
	if(name == 0x9B) return "GScr_FPrintln";
	if(name == 0x9C) return "GScr_FPrintFields";
	if(name == 0x9D) return "GScr_FReadLn";
	if(name == 0x9E) return "GScr_FGetArg";
	if(name == 0x9F) return "GScr_SetMiniMap";
	if(name == 0xA0) return "GScr_SetThermalBodyMaterial";
	if(name == 0xA1) return "GScr_GetArrayKeys";
	if(name == 0xA2) return "GScr_GetFirstArrayKey";
	if(name == 0xA3) return "GScr_GetNextArrayKey";
	if(name == 0xA4) return "GScr_SortByDistance";
	if(name == 0xA5) return "Scr_TableLookup";
	if(name == 0xA6) return "Scr_TableLookupByRow";
	if(name == 0xA7) return "Scr_TableLookupIString";
	if(name == 0xA8) return "Scr_TableLookupIStringByRow";
	if(name == 0xA9) return "Scr_TableLookupRowNum";
	if(name == 0xAA) return "GScr_GetMissileOwner";
	if(name == 0xAB) return "Scr_MagicBullet";
	if(name == 0xAC) return "Scr_GetWeaponFlashTagname";
	if(name == 0xAD) return "GScr_AveragePoint";
	if(name == 0xAE) return "GScr_AverageNormal";
	if(name == 0xAF) return "GScr_GetGlass";
	if(name == 0xB0) return "GScr_GetGlassArray";
	if(name == 0xB1) return "GScr_GetGlassOrigin";
	if(name == 0xB2) return "GScr_IsGlassDestroyed";
	if(name == 0xB3) return "GScr_DestroyGlass";
	if(name == 0xB4) return "GScr_DeleteGlass";
	if(name == 0xB5) return "GScr_GetEntChannelsCount";
	if(name == 0xB6) return "GScr_GetEntChannelName";
	if(name == 0x128) return "GScr_SetHUDLighting";
	if(name == 0x129) return "GScr_ReconEvent";
	if(name == 0x12A) return "GScr_ReconSpatialEvent";
	if(name == 0x12B) return "GScr_SetSunFlarePosition";
	if(name == 0x12C) return "SentientCmd_CreateThreatBiasGroup";
	if(name == 0x12D) return "SentientCmd_ThreatBiasGroupExists";
	if(name == 0x12E) return "SentientCmd_GetThreatBias";
	if(name == 0x12F) return "SentientCmd_SetThreatBias";
	if(name == 0x130) return "SentientCmd_SetThreatBiasAgainstAll";
	if(name == 0x131) return "SentientCmd_SetIgnoreMeGroup";
	if(name == 0x132) return "SentientCmd_IsEnemyTeam";
	if(name == 0xB7) return "Scr_Objective_Add";
	if(name == 0xB8) return "Scr_Objective_Delete";
	if(name == 0xBD) return "Scr_Objective_OnEntity";
	if(name == 0x133) return "Scr_Objective_AdditionalEntity";
	if(name == 0xB9) return "Scr_Objective_State";
	if(name == 0x134) return "Scr_Objective_State_NoMessage";
	if(name == 0x135) return "Scr_Objective_String";
	if(name == 0x136) return "Scr_Objective_String_NoMessage";
	if(name == 0xBA) return "Scr_Objective_Icon";
	if(name == 0xBB) return "Scr_Objective_Position";
	if(name == 0x137) return "Scr_Objective_AdditionalPosition";
	if(name == 0xBC) return "Scr_Objective_Current";
	if(name == 0x138) return "Scr_Objective_Current_NoMessage";
	if(name == 0x139) return "Scr_Objective_AdditionalCurrent";
	if(name == 0x13A) return "Scr_Objective_Ring";
	if(name == 0x13B) return "Scr_Objective_SetPointerTextOverride";
	if(name == 0xC2) return "iprintln";
	if(name == 0xC3) return "iprintlnbold";
	if(name == 0xC5) return "Scr_GetEnt";
	if(name == 0xC6) return "Scr_GetEntArray";
	if(name == 0x13C) return "Scr_GetNode";
	if(name == 0x13D) return "Scr_GetNodeArray";
	if(name == 0x13E) return "Scr_GetAllNodes";
	if(name == 0x13F) return "Scr_GetNodesInRadius";
	if(name == 0x140) return "Scr_GetNodesInRadiusSorted";
	if(name == 0x141) return "Scr_GetClosestNodeInSight";
	if(name == 0x142) return "Scr_GetReflectionLocs";
	if(name == 0x143) return "Scr_GetReflectionReferenceLocs";
	if(name == 0xC4) return "Scr_LogString";
	if(name == 0x144) return "GScr_GetVehicleTrackSegment";
	if(name == 0x145) return "GScr_GetVehicleTrackSegmentArray";
	if(name == 0x146) return "GScr_GetAllVehicleTrackSegments";
	if(name == 0xC8) return "Scr_AddStruct";
	if(name == 0x147) return "GScr_IsArray";
	if(name == 0xCA) return "GScr_IsAlive";
	if(name == 0xCB) return "GScr_IsSpawner";
	if(name == 0xD7) return "GScr_IsPlayer";
	if(name == 0x148) return "GScr_IsAI";
	if(name == 0x149) return "GScr_IsSentient";
	if(name == 0x14A) return "GScr_IsGodMode";
	if(name == 0x14B) return "GScr_GetDebugDvar";
	if(name == 0x14C) return "GScr_GetDebugDvarInt";
	if(name == 0x14D) return "GScr_GetDebugDvarFloat";
	if(name == 0x14E) return "GScr_SetSavedDvar";
	if(name == 0x14F) return "Scr_GetFreeAICount";
	if(name == 0x150) return "Scr_GetAICount";
	if(name == 0x151) return "Scr_GetAIArray";
	if(name == 0x152) return "Scr_GetAISpeciesArray";
	if(name == 0x153) return "Scr_GetSpawnerArray";
	if(name == 0x154) return "Scr_GetCorpseArray";
	if(name == 0x155) return "Scr_GetSpawnerTeamArray";
	if(name == 0x156) return "Scr_GetWeaponClipModel";
	if(name == 0x157) return "GScr_GetBrushModelCenter";
	if(name == 0x158) return "GScr_GetKeyBinding";
	if(name == 0x159) return "GScr_GetCommandFromKey";
	if(name == 0x15A) return "GScr_GetSticksConfig";
	if(name == 0x15B) return "GScr_WeaponFightDist";
	if(name == 0x15C) return "GScr_WeaponMaxDist";
	if(name == 0x15D) return "GScr_IsTurretActive";
	if(name == 0x15E) return "Scr_Target_Alloc";
	if(name == 0x15F) return "Scr_Target_Flush";
	if(name == 0x160) return "Scr_Target_Set";
	if(name == 0x161) return "Scr_Target_Remove";
	if(name == 0x162) return "Scr_Target_SetShader";
	if(name == 0x163) return "Scr_Target_SetOffscreenShader";
	if(name == 0x164) return "Scr_Target_IsInRect";
	if(name == 0x165) return "Scr_Target_IsInCircle";
	if(name == 0x166) return "Scr_Target_StartLockOn";
	if(name == 0x167) return "Scr_Target_ClearLockOn";
	if(name == 0x168) return "Scr_Target_GetArray";
	if(name == 0x169) return "Scr_Target_IsTarget";
	if(name == 0x16A) return "Scr_Target_SetAttackMode";
	if(name == 0x16B) return "Scr_Target_SetJavelinOnly";
	if(name == 0x16C) return "Scr_Target_HideFromPlayer";
	if(name == 0x16D) return "Scr_Target_ShowToPlayer";
	if(name == 0x16E) return "Scr_Target_SetScaledRenderMode";
	if(name == 0x16F) return "Scr_Target_DrawCornersOnly";
	if(name == 0x170) return "Scr_Target_DrawSquare";
	if(name == 0x171) return "Scr_Target_DrawSingle";
	if(name == 0x172) return "Scr_Target_SetMinSize";
	if(name == 0x173) return "Scr_Target_SetMaxSize";
	if(name == 0x174) return "Scr_Target_SetColor";
	if(name == 0x175) return "Scr_Target_SetDelay";
	if(name == 0xCC) return "Scr_MissileCreateAttractorEnt";
	if(name == 0xCD) return "Scr_MissileCreateAttractorOrigin";
	if(name == 0xCE) return "Scr_MissileCreateRepulsorEnt";
	if(name == 0xCF) return "Scr_MissileCreateRepulsorOrigin";
	if(name == 0xD0) return "Scr_MissileDeleteAttractor";
	if(name == 0x176) return "GScr_GetStartOrigin";
	if(name == 0x177) return "GScr_GetStartAngles";
	if(name == 0x178) return "GScr_GetCycleOriginOffset";
	if(name == 0x179) return "ScrCmd_MagicGrenade";
	if(name == 0x17A) return "ScrCmd_MagicGrenadeManual";
	if(name == 0x17B) return "Scr_SetBlur";
	if(name == 0x17C) return "Scr_MusicPlay";
	if(name == 0x17D) return "Scr_MusicStop";
	if(name == 0x17E) return "Scr_SoundFade";
	if(name == 0x17F) return "Scr_SoundSetTimeScaleFactor";
	if(name == 0x180) return "Scr_SoundResetTimeScale";
	if(name == 0x181) return "Scr_SoundSetOcclusionPreset";
	if(name == 0x182) return "Scr_LevelSoundFade";
	if(name == 0x183) return "Scr_PrecacheNightvisionCodeAssets";
	if(name == 0x184) return "Scr_PrecacheDigitalDistortCodeAssets";
	if(name == 0x185) return "Scr_PrecacheMinimapSentryCodeAssets";
	if(name == 0x186) return "Scr_SaveGame";
	if(name == 0x187) return "Scr_IsSaveSuccessful";
	if(name == 0x188) return "Scr_IsRecentlyLoaded";
	if(name == 0x189) return "Scr_SaveGameNoCommit";
	if(name == 0x18A) return "Scr_CommitSave";
	if(name == 0x18B) return "Scr_CommitWouldBeValid";
	if(name == 0x18C) return "Scr_GetFXVis";
	if(name == 0x18D) return "Scr_SetCullDist";
	if(name == 0x18E) return "Scr_GetCullDist";
	if(name == 0x18F) return "Scr_SetHalfResParticles";
	if(name == 0x119) return "Scr_VisionSetNaked";
	if(name == 0x11A) return "Scr_VisionSetNight";
	if(name == 0x11B) return "Scr_VisionSetMissilecam";
	if(name == 0x11C) return "Scr_VisionSetThermal";
	if(name == 0x11D) return "Scr_VisionSetPain";
	if(name == 0x190) return "Scr_GetMapSunLight";
	if(name == 0x191) return "Scr_SetSunLight";
	if(name == 0x192) return "Scr_ResetSunLight";
	if(name == 0x193) return "Scr_GetMapSunDirection";
	if(name == 0x194) return "Scr_GetMapSunAngles";
	if(name == 0x195) return "Scr_SetSunDirection";
	if(name == 0x196) return "Scr_LerpSunDirection";
	if(name == 0x197) return "Scr_LerpSunAngles";
	if(name == 0x198) return "Scr_ResetSunDirection";
	if(name == 0x199) return "Scr_EnableForcedSunShadows";
	if(name == 0x19A) return "Scr_EnableForcedNoSunShadows";
	if(name == 0x19B) return "Scr_DisableForcedSunShadows";
	if(name == 0x19C) return "Scr_EnableOuterSpaceModelLighting";
	if(name == 0x19D) return "Scr_DisableOuterSpaceModelLighting";
	if(name == 0x19E) return "GScr_RemapStage";
	if(name == 0x19F) return "GScr_ChangeLevel";
	if(name == 0x1A0) return "GScr_MissionSuccess";
	if(name == 0x1A1) return "GScr_MissionFailed";
	if(name == 0x1A2) return "GScr_Cinematic";
	if(name == 0x1A3) return "GScr_CinematicInGame";
	if(name == 0x1A4) return "GScr_CinematicInGameSync";
	if(name == 0x1A5) return "GScr_CinematicInGameLoop";
	if(name == 0x1A6) return "GScr_CinematicInGameLoopResident";
	if(name == 0x1A7) return "GScr_IsCinematicPlaying";
	if(name == 0x1A8) return "GScr_StopCinematicInGame";
	if(name == 0x1A9) return "GScr_PauseCinematicInGame";
	if(name == 0x1AA) return "GScr_DrawCompassFriendlies";
	if(name == 0x1AB) return "Scr_BulletSpread";
	if(name == 0x1AC) return "Scr_BulletTracer";
	if(name == 0x1AD) return "Scr_BadPlace_Delete";
	if(name == 0x1AE) return "Scr_BadPlace_Cylinder";
	if(name == 0x1AF) return "Scr_BadPlace_Arc";
	if(name == 0x1B0) return "Scr_BadPlace_Brush";
	if(name == 0x1B1) return "Scr_ClearAllCorpses";
	if(name == 0xD2) return "GScr_NewHudElem";
	if(name == 0xD3) return "GScr_NewClientHudElem";
	if(name == 0xD5) return "Scr_ResetTimeout";
	if(name == 0x1B2) return "Scr_SetTurretNode";
	if(name == 0x1B3) return "Scr_UnsetTurretNode";
	if(name == 0x1B4) return "Scr_SetNodePriority";
	if(name == 0x1B5) return "Scr_IsNodeOccupied";
	if(name == 0x1B6) return "GScr_SetDebugOrigin";
	if(name == 0x1B7) return "GScr_SetDebugAngles";
	if(name == 0x116) return "Scr_IsSplitscreen";
	if(name == 0x1B8) return "ScrCmd_UpdateGamerProfile";
	if(name == 0x1B9) return "ScrCmd_UpdateGamerProfileAll";
	if(name == 0x1BA) return "GScr_ClearLocalizedStrings";
	if(name == 0x1BB) return "ScrCmd_SetPhysicsGravityDir";
	if(name == 0x1BC) return "ScrCmd_GetTimeScale";
	if(name == 0x1BD) return "ScrCmd_SetTimeScale";
	if(name == 0x1BE) return "ScrCmd_SetSlowMotionView";
	if(name == 0x1BF) return "ScrCmd_ForceSharedAmmo";
	if(name == 0x1C0) return "Scr_RefreshHudCompass";
	if(name == 0x1C1) return "Scr_RefreshHudAmmoCounter";
	if(name == 0x1C2) return "GScr_notifyOnCommand";
	if(name == 0x1C3) return "Scr_GetTimeSinceLastPaused";
	if(name == 0x1C4) return "GScr_SetLaserMaterial";
	if(name == 0x123) return "GScr_IncrementCounter";
	if(name == 0x124) return "GScr_GetCounterTotal";
	return sprintf("GSCFunc_%X", name);
}

static LabelCommonMethod() {
    auto ea = 0x004DAFFC;
    auto i = 0;
    for(i = 0;i < 169;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelActorMethod() {
    auto ea = 0x004D339C;
    auto i = 0;
    for(i = 0;i < 117;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelSentientMethod() {
    auto ea = 0x004DFF7C;
    auto i = 0;
    for(i = 0;i < 9;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelAnimationMethod() {
    auto ea = 0x004DAA58;
    auto i = 0;
    for(i = 0;i < 33;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelPlayerMethod() {
    auto ea = 0x004D4658;
    auto i = 0;
    for(i = 0;i < 44;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelPlayerCommonMethod() {
    auto ea = 0x004D3DF0;
    auto i = 0;
    for(i = 0;i < 125;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelScriptEntMethod() {
    auto ea = 0x004DC730;
    auto i = 0;
    for(i = 0;i < 24;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelVehicleScriptMethod() {
    auto ea = 0x004F7AD4;
    auto i = 0;
    for(i = 0;i < 65;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelHudElemMethod() {
    auto ea = 0x004D5144;
    auto i = 0;
    for(i = 0;i < 26;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}
static LabelBuiltInMethod() {
    auto ea = 0x004DBAA8;
    auto i = 0;
    for(i = 0;i < 89;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}

static LabelCommonFunction() {
    auto ea = 0x006A9494;
    auto i = 0;
    for(i = 0;i < 191;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}

static LabelSentientFunction() {
    auto ea = 0x004DFFE8;
    auto i = 0;
    for(i = 0;i < 7;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}

static LabelObjectivesFunction() {
    auto ea = 0x006AA540;
    auto i = 0;
    for(i = 0;i < 16;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}

static LabelBuiltInFunction() {
    auto ea = 0x006A9D88;
    auto i = 0;
    for(i = 0;i < 163;i++) {
        auto table = ea + (i * 0xC);
        Message("0x%X - %s - 0x%X\n", table, resolve(Dword(table)), Dword(Dword(table + 4)));
        MakeName(Dword(Dword(table + 4)), resolve(Dword(table)));
        MakeName(Dword(table + 4), sprintf("%s_t", resolve(Dword(table))));
    }
}


static main(void) {
    LabelCommonMethod();
    LabelActorMethod();
    LabelSentientMethod();
    LabelAnimationMethod();
    LabelPlayerMethod();
    LabelPlayerCommonMethod();
    LabelScriptEntMethod();
    LabelVehicleScriptMethod();
    LabelHudElemMethod();
    LabelBuiltInMethod();
    
    LabelCommonFunction();
    LabelSentientFunction();
    LabelObjectivesFunction();
    LabelBuiltInFunction();
    
}
